export

SHELL = /bin/sh
# Clear default rules
.SUFFIXES:

# Extra options to compile project with
EXTRA_OPTIONS = -O3

# Extra options to link project with
EXTRA_LD_OPTIONS = $(EXTRA_OPTIONS)

# Warnings options to compile project with
WARNING_OPTIONS = -Wall -Wextra -Wshadow -Wfloat-equal -Wno-unused-result # -Weffc++

CFLAGS = $(WARNING_OPTIONS) $(EXTRA_OPTIONS) -c
CXXFLAGS = $(CFLAGS)
LFLAGS = $(WARNING_OPTIONS) $(EXTRA_LD_OPTIONS)

# Shell commands
MV = mv -f
CP = cp -rf
UPDATE = $(CP) -u
RM = rm -f
MKDIR = mkdir -p

DEBUG = 0
VERBOSE = 0

ifeq ($(DEBUG), 1)
CFLAGS += -DDEBUG
LFLAGS += -DDEBUG
else ifeq ($(DEBUG), 2)
CFLAGS += -g -O0
LFLAGS += -g -O0
else ifeq ($(DEBUG), 3)
CFLAGS += -DDEBUG -g -O0
LFLAGS += -DDEBUG -g -O0
endif

# Rest
ifeq ($(MAKELEVEL), 0)
ROOT := $(shell pwd)
ifneq ($(shell printf $(ROOT) | tail -c 1), $(shell printf "/"))
ROOT := $(ROOT)/
endif
endif

ifeq ($(VERBOSE),1)
	Q :=
	P =
else
	Q := @
	P = @echo "   "$(1)"\t "$(subst $(ROOT),,$(abspath $(2)));
	MAKEFLAGS += --no-print-directory
	# If CMDGOAL isn't install or unistall
	ifeq (,$(filter $(MAKECMDGOALS), install uninstall))
		MAKEFLAGS += -s
	endif
endif

# Default rules
%.o: %.c
	$(Q)$(call P,CC,$@)$(CC) $< $(CXXFLAGS) -o $@

%.o: %.cc
	$(Q)$(call P,CXX,$@)$(CXX) $< $(CXXFLAGS) -o $@

%.o: %.cpp
	$(Q)$(call P,CXX,$@)$(CXX) $< $(CXXFLAGS) -o $@

%.deps:
	$(Q) echo -n "$@ " > $@
	$(Q)$(call P,CC,$@)$(CC) -MM $* >> $@

.DEFAULT_GOAL :=
