export

MAKECONFIG_DIR = $(dir $(lastword $(MAKEFILE_LIST)))

SHELL = /bin/sh

# Clear default rules
.SUFFIXES:

# Root directory
ROOT ?= $(abspath $(dir $(firstword $(MAKEFILE_LIST))))

# Optimizations
OPTIMIZATIONS ?= -O3

# Extra options to compile project with
EXTRA_C_FLAGS ?=
EXTRA_CXX_FLAGS ?=

# Extra options to link project with
EXTRA_LD_FLAGS ?=

# Warning options to compile project with
WARNING_FLAGS ?= -Wall -Wextra -Wshadow -Wfloat-equal -Wno-unused-result # -Weffc++

CFLAGS = $(WARNING_FLAGS) $(EXTRA_C_FLAGS)
CXXFLAGS = -std=c++11 $(CFLAGS) $(OPTIMIZATIONS) $(EXTRA_CXX_FLAGS)
LFLAGS = $(OPTIMIZATIONS) $(EXTRA_LD_FLAGS)

# Shell commands
MV = mv -f
CP = cp -rf
UPDATE = $(CP) -u
RM = rm -f
MKDIR = mkdir -p

DEBUG = 0
VERBOSE = 0

ifeq ($(DEBUG), 1)
CFLAGS += -DDEBUG
else ifeq ($(DEBUG), 2)
CFLAGS += -DDEBUG -O0 -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -fsanitize=address -fsanitize=leak -fsanitize=undefined
else ifeq ($(DEBUG), 3)
CFLAGS += -DDEBUG -g -O0 -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -fsanitize=address -fsanitize=leak -fsanitize=undefined
else ifeq ($(DEBUG), 4)
CFLAGS += -g -O0
endif

# Rest
ifeq ($(VERBOSE),1)
	Q :=
	P =
else
	Q := @
	P = @printf "  %-8s %s\n" '$(1)' '$(subst $(ROOT),,$(abspath $(2)))';
	MAKEFLAGS += --no-print-directory -s
endif

VARS_DEPS_FILE = Makefile.deps

# Default rules
%.o: %.c %.c.cmd.deps
	$(Q)$(call P,CC,$@)$(CC) $< $(CFLAGS) -c -o $@

%.o: %.cc %.cc.cmd.deps
	$(Q)$(call P,CXX,$@)$(CXX) $< $(CXXFLAGS) -c -o $@

%.o: %.cpp %.cpp.cmd.deps
	$(Q)$(call P,CXX,$@)$(CXX) $< $(CXXFLAGS) -c -o $@

# When you call this function in your make like that: $(eval $(call dependencies))
# it will build dependencies of .c, .cc, .cpp files and include them automatically
# only if the make goal is not 'clean'
# As a first (optional) argument it takes path of a directory to scan - by default
# current directory
define dependencies
ifneq ($(filter $(MAKECMDGOALS), clean), clean)
-include $(shell find $(1) -maxdepth 1 -mindepth 1 -regex '.*\.\(c\|cc\|cpp\)' \
	| sed "s/$$/\.deps/")
endif
endef

%.c.deps: %.c
	$(Q) echo -n "$@ " > $@
	$(Q)$(call P,DEP,$@)$(CC) -MM $(CFLAGS) $< >> $@ || { $(RM) $@; exit 1; }

%.cc.deps: %.cc
	$(Q) echo -n "$@ " > $@
	$(Q)$(call P,DEP,$@)$(CXX) -MM $(CXXFLAGS) $< >> $@ || { $(RM) $@; exit 1; }

%.cpp.deps: %.cpp
	$(Q) echo -n "$@ " > $@
	$(Q)$(call P,DEP,$@)$(CXX) -MM $(CXXFLAGS) $< >> $@ || { $(RM) $@; exit 1; }

LINK = $(Q)$(call P,LINK,$@)$(CXX) $^ $(CXXFLAGS) $(LFLAGS) -o $@

# Build dependencies based on compilers and compilation flags
# Because f* make does not allow ';' in string in dependencies
SEMICOLON = ;
.SECONDEXPANSION:
.PRECIOUS: %.cmd.deps

# C files depend on C compiler and C flags
%c.cmd.deps: VARS_DEPS_CONTENTS = "$(CC);$(CFLAGS)"
# C++ files depend on C++ compiler and C++ flags
%cc.cmd.deps %cpp.cmd.deps: VARS_DEPS_CONTENTS = "$(CXX);$(CXXFLAGS)"

%.cmd.deps: $$(shell bash -c \
	'if [ $$(VARS_DEPS_CONTENTS) != "$$(shell cat '$$@' 2> /dev/null)" ] \
		$$(SEMICOLON) then echo FORCE $$(SEMICOLON) fi')
	$(Q)$(call P,CMD-DEP,$@) echo $(VARS_DEPS_CONTENTS) > $@

.PHONY: FORCE
FORCE:

.DEFAULT_GOAL :=
